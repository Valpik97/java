Здравствуй, дорогой друг!

Ты приступаешь к изучению темы «Разветвляющиеся алгоритмы».

Изучение данной темы будет проводиться в формате онлайн-уроков.

Онлайн-уроки по этой теме состоятся 22.10.2022, 26.10.2022, 29.10.2022, 02.11.2022.

Алгоритмы, в которых операторы выполняются строго друг за другом, называются линейными. В случае линейного алгоритма программа неспособна принимать решение. Например, при определённых значениях температуры давать команду на включение или выключение обогревателя и т. д. Для решения подобных задач используют разветвляющиеся алгоритмы, т. е. алгоритмы, способные осуществлять проверку значений и выполнять различные части кода в зависимости от результата этой проверки.

В языке Java, как и в языке С, существуют два вида операторов для проверки условий:

Условный оператор «if».
Оператор выбора «switch».
На онлайн-уроках ты научишься писать программы с разветвляющимся алгоритмом:

Усовершенствуешь программу из предыдущего урока, чтобы пользователь мог вводить с клавиатуры операцию, которую хотел бы выполнить над числами.
Создашь шуточную программу-тест для решения жизненных проблем.
На предыдущем уроке ты создал программу умножения двух чисел, но при вводе значения, которое не является вещественным числом, происходила критическая ошибка. В этом уроке ты модернизируешь программу таким образом, чтобы при вводе неверного значения программа выдавала корректное сообщение.

Для проверки условия будем использовать оператор «if». Его синтаксис такой же, как и в языке С, поэтому давай просто повторим то, что ты уже знаешь.

Оператор начинается с ключевого слова «if», за которым следует булево (логическое) выражение, заключённое в скобки. Самая простая форма условного оператора выглядит так:

	if (<условие>) {
	    <операторы>
	}
В этой конструкции, если условие истинно, то выполняются <операторы>.

Примечание: если после условия записан только один оператор, то фигурные скобки можно не писать.

Существует вариант оператора «if» с использованием ключевого слова «else»:

	if (<условие>) {
	    <операторы 1>
	}
	else {
	    <операторы 2>
	}
В этом случае при выполнении условия оператора «if», выполняются <операторы 1>, а если условие не выполняется, то выполняются <операторы 2>.

В программах также часто используется цепочка операторов «if—else—if», состоящая из вложенных операторов «if», например:

	if (<условие 1>)
	    <оператор 1>;
	else if (<условие 2>)
	    <оператор 2>;
	else if (<условие 3>)
	    <оператор 3>;
	else
	    <оператор 4>;
Примечание: фигурные скобки в коде опущены, считая, что в каждом блоке записан только один оператор.

Условные выражения проверяются сверху вниз. Как только найдено условие, принимающее значение «true», выполняется соответствующий оператор, а остальная часть цепочки пропускается. Если ни одно из условий не принимает значение «true», то выполняется последний оператор <оператор 4>, который можно рассматривать как оператор по умолчанию. Если же последний оператор «else» отсутствует, а все условные выражения принимают значение «false», то не выполняется никаких действий.

Примечание: часто цепочку можно заменить более наглядным оператором «switch».

В предыдущем уроке ты уже модифицировал функцию ввода данных, чтобы обойти ситуацию с вводом неверного разделителя в записи вещественного числа, но данная модификация не позволяла избежать ошибки, если пользователь вводил, например, строковое значение. Поэтому сейчас мы откажемся от предыдущей модификации и перепишем метод иначе.

1. Открой класс «myClass» проекта из предыдущего урока.

2. Модифицируй функцию ввода данных с клавиатуры «InputNumber» таким образом, чтобы при вводе некорректных данных выдавалось сообщение «Неверный ввод» (а потом программа всё-таки будет завершать свою работу).

Для проверки корректности ввода воспользуйся методами класса «Scanner», которые проверяют, что в потоке ввода лежат данные, удовлетворяющие заданному простому типу. Такие методы начинаются с префикса «has».

В нашем случае, программа ожидает ввода значения типа «double», т. е. тебе необходим метод «hasNextDouble()». Если этот метод возвращает «true», значит, ввод верный, если «false», значит, неверный.

Таким образом, функция «InputNumber» будет возвращать результат только тогда, когда произошло корректное считывание данных:

	if (sc.hasNextDouble() == true)
	    return sc.nextDouble();
Примечание: если логическое выражение необходимо проверить на истинность, то в условии код «== true» писать необязательно (в настоящий момент это даже считается плохим тоном программирования, т.к. усложняет чтение кода). В результате более правильный код будет выглядеть следующим образом:

	if (sc.hasNextDouble())
	    return sc.nextDouble();
В случае неверного ввода, необходимо показать предупреждение и принудительно завершить выполнение программы:

	System.out.println("Неверный ввод.");
	System.out.print("Программа завершила работу.");
	System.exit(0);
	return 0;
Метод «exit(0)» из библиотеки «System» осуществляет принудительное закрытие программы.

Обрати внимание, что после закрытия программы стоит незначащий оператор «return». Незначащий, т. к., в случае неверного ввода данных, до него дело не дойдёт, программа уже завершит свою работу через метод «exit(0)». Но тем не менее, если его убрать, то среда Eclipse выдаст синтаксическую ошибку, т. к. функция должна при любом исходе возвращать какой-то результат. А метод завершения работы программы не расценивается как выход из функции.

Если у тебя возникли затруднения в написании кода, держи полный код модифицированной функции:


Запусти программу на выполнение и проверь её работоспособность, введя неверные данные. Результат может быть, например, таким:


Программа, как и раньше, завершает свою работу при неверном вводе данных, но делает это более «дружественно».

Сейчас наша программа напоминает калькулятор, правда умеющий выполнять только умножение.

Но калькулятор будет куда более востребован, если пользователь сможет вводить ещё и операцию, которую хочет выполнить над числами (сложение, вычитание, умножение или деление). В общем случае алгоритм работы программы будет следующим:


Теперь давай посмотрим, как мы будем модифицировать программу.

Необходимо создать новую функцию для ввода типа операции (+, -, * или /), например, с именем «InputOperation». Функция будет возвращать операцию в виде строки.
Модифицировать функцию «Result», где дополнительным аргументом будет передаваться тип операции, а в теле функции результат будет рассчитываться с учётом этой операции.
Модифицировать метод «main» с учётом предыдущих двух пунктов.
 

Итак, приступим.

Напиши функцию, которая просит пользователя ввести операцию. Функция должна возвращать строку, в которой будет храниться введённая операция, а на вход получать один параметр, содержащий строку запроса данных у пользователя (как в функции «InputNumber»).

Заголовок функции будет выглядеть следующим образом:

	static String InputOperation(String caption)
Важно: строки являются объектами класса «String». К ним нельзя применять стандартные операции сравнения:

Оператор	Описание
<	Меньше чем
<=	Меньше или равно
>	Больше чем
>=	Больше или равно
==	Равно
!=	Не равно
При использовании этих операций будет сравниваться не содержимое строк, а их адреса в памяти, где они хранятся. Поэтому для сравнения строк используется метод «equals()», который вызывается от имени строки, которую нужно с чем-то сравнить, а в качестве аргумента получает строку, с которой и будет производиться сравнение (более подробно методы работы со строками будут рассмотрены позже). В результате условие проверки правильности ввода операции будет выглядеть следующим образом:

	String op = sc.next();
	if (op.equals("*") || op.equals("/") || op.equals("+") || op.equals("-"))
	        return op;
При неверном вводе операции программа должна выводить сообщение Неверный ввод и закрываться.

Если у тебя возникли затруднения, посмотри полный код функции:


Обрати внимание, что логическое выражение в операторе «if» состоит из четырёх условий, которые объединены логической операцией «ИЛИ». Полный список логических операций языка Java:

Оператор	Описание
&&	Логическое AND (И)
||	Логическое OR (ИЛИ)
^	Логическое XOR (исключающее OR (ИЛИ))
!	Логическое унарное NOT (НЕ)
Примечание: логические операторы работают только с операндами типа «boolean».

Результаты выполнения логических операторов:

A	B	A || B	A && B	A ^ B	!A
false	false	false	false	false	true
true	false	true	false	true	false
false	true	true	false	true	true
true	true	true	true	false	false
Модифицируй функцию расчёта результата «Result».

В параметрах функции должен появиться третий аргумент, отвечающий за операцию, например:

	static void Result(double a, double b, String op)
Выбор формулы для расчёта результата на основе полученной на вход операции проще и наглядней осуществить, используя оператор выбора «switch».

Синтаксис оператора «switch» в Java выглядит так же, как и в С:

	switch( <Выражение> ) {
	    case <Значение 1>:
	        <Команда 1>;
	        break;
	    case <Значение 2>:
	        <Команда 2>;
	        break;
	    case <Значение 3>:
	        <Команда 3>;
	        break;
	    default:
	        <Команда 4>;
	        break;
	}
Параметр <Выражение> — это переменная типа byte, short, char, int или String.

Оператор «switch» сравнивает результат выражения с каждым значением, перечисленным в операторах «case». Если обнаруживается совпадение, то исполняется команда или набор команд, которые прописаны за данным оператором. Если совпадений не будет найдено, то исполнится команда после ключевого слова «default».

Однако оператор «default» не является обязательным. Если его нет, то при отсутствии совпадений не выполнится никаких действий.

Каждая секция «case» обычно заканчивается командой «break2, которая передаёт управление оператору, следующему за блоком «switch».

В секциях «case» не допускается дублирование значений, а тип каждого значения должен быть совместим с типом выражения в «switch».

В нашей функции аргументом оператора «switch» будет переменная, хранящая символ введённой операции, а за выбор нужного программного кода будет отвечать блок "сase2. Например, для сложения:

	static void Result(double a, double b, String op){
	    double result = 0;
	    switch (op) {
	    case "+":
	        result = a + b;
	        break;
	...
Аналогичным образом записываются блоки «сase» для остальных операций.

Если у тебя возникли затруднения, держи полный код функции:


 

Завершающий этап

1. Модифицируй функцию «main» c учётом добавления в программу новой функции «InputOperation» и модификации функции «Result».

2. Измени формулировку в «шапке», выводимой функцией «Header», ведь теперь программа выполняет не только умножение двух чисел.

Примечание: функция «InputOperation» должна вызываться между функциями ввода аргументов операции.

Если у тебя возникли затруднения в написании программы, посмотри полный код функции «main»:


3. Запусти программу на выполнение и проверь её работоспособность. Результат может быть, например, таким:


Теперь ты получил полноценный калькулятор, правда, в консольном режиме и без возможности продолжить работу программы, если пользователь ввёл неверные данные. Но оба этих недочёта будут устранены на следующих уроках.

Часто для того, чтобы принять какое-то решение, нужно проверить не одно, а несколько условий.

Для примера давай напишем небольшую программу, которая на основе нескольких вопросов о ситуации будет принимать решение о том, насколько серьёзна проблема.

1. Создай новый проект с именем «Problem», а в нём создай класс с именем «myClass».

Мы будем писать программу, которая принимает решение на основе небольшого опроса, согласно следующей блок-схеме:


Пример работы программы может быть таким:


2. Напиши функцию отображения заголовка. Дай этой функции имя «Header»:

	static void Header(){
	    System.out.println("Программа выявления проблем");
	    System.out.println("---------------------------");
	}\
3. Напиши функцию для ввода пользователем ответа да или нет. Функция должна возвращать логическое значение (boolean). Если пользователь ввёл что-то отличное от слов да или нет, то должно появляться сообщение «Неверный ввод» и программа должна завершать свою работу.

Примечание: для сравнения строк используй метод «equals()».

	static boolean Answer(String caption){
	    System.out.print(caption);
	    Scanner sc = new Scanner(System.in);
	    String op = sc.next();
	    if (op.equals("да")) return true;
	    if (op.equals("нет")) return false;
	
	    System.out.print("Неверный ввод. \nПрограмма завершила работу.");
	    System.exit(0);
	    return false;
	}
4. Запиши реализацию логики блок-схемы в функции «main»:

	public static void main(String[] args) {
	    Header();
	
	    if (Answer("Это работает? : "))
	        System.out.println("Ничего не трогай!");
	    else
        if (Answer("Ты это трогал? : "))
	        if (Answer("Кто-нибудь об этом знает? : ")){
	            System.out.print("Ты попал!");
	            System.exit(0);
 	       }
	
        System.out.print("Нет проблем!");
	}
Обрати внимание, что на фразу «Нет проблем» ссылается три условных блока (см. блок-схему), после чего программа завершает свою работу. Поэтому достаточно написать эту фразу в самом конце программы, при отображении фразы «Ты попал!» принудительно закрывать программу методом «exit».

Запусти программу и протестируй все возможные варианты её работы.
Создай архивный файл «.jar» и исполняемый «.exe».
Примечание: так как стандартная кодировка операционной системы Windows — cp1251, а кодировка консоли — cp866, перед созданием приложения надо обязательно предусмотреть этот момент: теперь нужно считывать строку, которую вводит пользователь, в кодировке консоли:

	Scanner sc = new Scanner(System.in, "Cp866");