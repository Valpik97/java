Здравствуй, дорогой друг!

Ты приступаешь к изучению темы «Борьба с ошибками».

Изучение данной темы будет проводиться в формате онлайн-урока.

Онлайн-урок по этой теме состоится 23.11.2022.

 

Приступим!

Любой человек в любой сфере деятельности может допускать ошибки. Ведь не делает ошибок только тот, кто ничего не делает.

Процесс написания программного кода наиболее подвержен ошибкам, ведь он требует постоянной концентрации внимания, особенно при решении сложных алгоритмических задач. Одно дело — написать алгоритм работы на бумаге, а совсем другое — перевести его в программный код, который будет не только правильно работать, но и отрабатывать различные внештатные ситуации (например, неверный ввод данных). К тому же постоянное нахождение за монитором приводит к быстрой утомляемости и частичной потере внимания. Благо среда Eclipse предоставляет широкий инструментарий по выявлению ошибок, а также может предложить варианты по их исправлению.

На этом онлайн-уроке ты освоишь поиск и исправление основных типов ошибок на примере чужого кода.

Различают три типа ошибок:

1. Синтаксические ошибки. Возникают, когда написанный программистом код не удовлетворяет синтаксис языка. Ошибки распознаются транслятором ещё в момент написания кода и делают компиляцию невозможной. Например, к таким ошибкам относятся: неверное написание оператора, отсутствие точки с запятой в конце оператора, неверное имя переменной и так далее.

2. Исключения (ошибки времени исполнения или runtime ошибки) При данных ошибках программа компилируется, но в процессе её работы происходят исключительные ситуации, приводящие к различного рода сообщениям об ошибке. Например, если в процессе работы программы вдруг происходит деление на ноль, открытие несуществующего файла, обращение к несозданному объекту и так далее.

3. Логические ошибки (семантические). Всё работает, но работает не так, как нужно. Например, программист ошибся и не сложил переменные, а перемножил их.

Логические и runtime ошибки часто называют багами.

Баг (англ. Bug — первичные значения: жук, насекомое) — жаргонное слово, обозначающее ошибку в программе или системе, которая выдаёт неправильный результат или приводит к её неработоспособности.

Сначала потренируемся в идентификации и исправлении синтаксических ошибок, а затем займёмся багами!

Современные среды разработки программного обеспечения делают всё возможное, чтобы известить программиста о синтаксической ошибке в коде, например:

предупреждают о случайной опечатке;
сообщают о неподключенном пакете;
указывают на использование неинициализированной переменной;
отслеживают несоблюдение типизации данных и так далее.
Среда Eclipse контролирует правильность синтаксиса непосредственно в режиме набора кода, если она обнаружила ошибку, то сразу сообщает о ней подчёркиванием красного цвета и отметкой на полях слева в виде крестика на красном фоне.

Если ошибка связана с ограничениями, накладываемыми на синтаксис языка, то при наведении курсора на ошибку среда предложит варианты её исправления.

1. Создай новый проект, а в нём создай класс с именем «myClass».

2. Открой файл «Код 1.txt» и скопируй его содержимое в метод «main».

Этот фрагмент кода должен вычислять площадь прямоугольника по введённым сторонам. Причём если стороны одинаковы, то программа пишет «Площадь квадрата», а если разные, то «Площадь прямоугольника». Пример правильной работы программы показан ниже:


3. Запусти приложение. В консоли вместо результата работы программы отобразится ошибка «Invalid character constant», что в переводе означает «Неверная символьная константа»:


4. Ниже ошибки отображается номер строки, где она произошла. Щёлкни по этой строке, компилятор перейдёт к месту ошибки в коде:


Очень удобно, что места ошибок в коде помечаются маркерами на полях, причём непосредственно при написании кода! Красным кружочком с крестиком помечены грубые (критические) синтаксические ошибки.

5. Наведи курсор мыши на место ошибки, отобразится всплывающая подсказка с более лаконичным названием ошибки:


Примечание: если имеет место грубая синтаксическая ошибка, то дальнейшей проверки кода на ошибки может и не быть (особенность ли это среды Eclipse или её баг, сказать сложно).

В данном случае имеет место довольно распространённая ошибка: заключение строки в одинарные кавычки. Хотя по правилам языка Java строки заключаются в двойные кавычки. А в одинарные кавычки заключаются одиночные символы.

6. Исправь одинарные кавычки на двойные:

	System.out.println("Расчёт площади прямоугольника");
После исправления этой ошибки среда Eclipse отобразит кучу других синтаксических ошибок:


7. Чтобы посмотреть все ошибки одним списком, открой панель «Problems» через главное меню среды Eclipse:


Эта панель отображает список всех ошибок в коде:


При двойном щелчке по строке с ошибкой в панели «Problems», курсор перейдёт на нужную строку кода.

Давай начнём исправлять ошибки по порядку.

В первой строке явно что-то не так с присвоением значения переменной. При наведении мышью на подчёркнутую область (или на значок слева в строке с ошибкой) появятся название ошибки и варианты её исправления (такие «плюшки» предусмотрены для большинства типов ошибок):


Как видно из названия ошибки, компилятор не сможет преобразовать тип «int» к типу «double». Всплывшая подсказка предлагает два решения:

Принудительно привести число к типу «int», что приведёт к округлению числа до ближайшего целого.
Изменить тип переменной на «double».
Так как значения могут быть вещественные, то следует выбрать второй вариант. В результате мы получим:

	double a = 4.5;
Примечание: пункты во всплывающем меню не только подсказывают варианты исправления ошибки, но и автоматически исправляют её согласно выбранному пункту, что существенно ускоряет процесс исправления синтаксических ошибок.

Следующая ошибка указывает на саму переменную «b»:


Текст ошибки сообщает о том, что переменная не разрешена. Первые три пункта предлагают объявить переменную различными способами (локально, в классе и как параметр метода), а последний пункт предлагает её вообще удалить.

Тебе необходимо выбрать объявление переменной локально хотя бы потому, что это наиболее наглядно в данной задаче, да и предыдущая переменная объявлена тоже локально. В результате получим:

	double b = 4.5;
А вот следующая ошибка является грубой (помечена символом «Кнопка»), здесь пропущена точка с запятой. Исправление этой ошибки не составит труда, сделай это самостоятельно.


Перейдём к следующей ошибке. Это довольно распространённая ошибка на начальном этапе программирования:


Казалось бы, обе переменные объявлены и тип их совпадает, но компилятор выдаёт сообщение, что переменная «B» не разрешена в коде.

Всё дело в том, что Java относится к языкам, где регистр символов имеет значение. И переменные «b» и «B» — это разные переменные.

Первый пункт во всплывающей подсказке как раз и предлагает изменить имя переменной на нужное, поэтому, выбрав его, получим:

	double area = a*b;
Примечание: остальные пункты предлагают объявить новую переменную «B» и даже заменить её на существующую переменную «a» (вдруг мы хотели получить квадрат числа «a»?).

Следующая ошибка тоже довольно распространена при построении логических выражений, посмотри на её описание:


Ошибка говорит о том, что невозможно преобразовать тип «double» в тип «boolean». В условии должно стоять логическое выражение, а сейчас там находится присвоение переменной «a» значения переменной «b», которая как раз и имеет тип «double».

Сравнение же на равенство двух однотипных переменных обозначается двойным символом равно, а не одним:

if (a==b)

Посмотри на следующую ошибку: из-за невнимательности при наборе кода было допущено неверное написание класса или метода (нужно учитывать чувствительность идентификаторов к регистру):


В данном случае, класс с именем «System» должен начинаться с большой буквы, о чём говорит один из пунктов всплывающего окна «Change to System (java.lang)». Выберем для исправления ошибки данный пункт.

Примечание: остальные пункты предлагают создать: новый класс «system» (имя которого начинается с маленькой буквы), переменную, константу и т. д. Кроме того, среда Eclipse обнаружила ещё несколько классов, начинающихся со слова «System», и также предложила их в качестве вариантов замены.

Всё! Все ошибки исправлены.

1. Запусти программу на выполнение и проверь её работоспособность при разных и одинаковых значениях переменных «a» и «b».

2. Посмотри внимательно на код и на панель «Problems». Несмотря на то что программа работает, в ней остались предупреждения «Warnings»:


Предупреждения не мешают компиляции кода, но подсказывают, что, вероятно, в коде что-то не так. И, возможно, это может привести к логическим ошибкам или к ошибкам времени выполнения.

Как видно из предупреждения, среда обнаружила неиспользуемую переменную и предлагает её просто удалить из кода, что, собственно, и нужно сделать, т. к. в программе используются только две переменные: «a» и «b»:


Примечание: удалять неиспользуемые переменные нужно с осторожность, ведь есть вероятность того, что они должны где-то использоваться, но по невнимательности не были использованы.

Если у тебя возникли затруднения в исправлении кода, можешь просмотреть полный код функции «main» после устранения всех недочётов:


Теперь попробуем разобраться с ошибками, которые происходят во время работы программы, а также с теми, которые приводят к неверному результату.

Первые называются ошибками времени выполнения, а вторые — логическими ошибками. Для их поиска часто пользуются специальными инструментами отладки.

Бывает, что в процессе работы программы вдруг понимаешь, что что-то пошло не так: приложение выдаёт совсем не те результаты, что ожидались, либо вообще внезапно завершает свою работу с какой-то ошибкой (на программистском жаргоне — «падает»). И для того, чтобы разобраться, что и почему работает не так, нужно выполнять отладку программы.

Отладка — этап разработки компьютерной программы, на котором обнаруживают и устраняют логические и runtime ошибки.

Чтобы понять, где возникла ошибка, часто достаточно знать всего две вещи:

текущие значения переменных в любой точке кода (чтобы понять, правильно ли рассчитываются логические и арифметические выражения);
путь выполнения программы (чтобы понять, какие условные операторы выполняются, в какие функции заходит программа, выполняется ли тело цикла и так далее).
Для такого тотального контроля над кодом используется специальное программное обеспечение — отладчик (поставляется со всеми современными средствами разработки).

Отладчик (дебагер, англ. debugger) — компьютерная программа, предназначенная для поиска ошибок в других программах, ядрах операционных систем и других видах кода.

Для активации отладчика необходимо запустить программу в режиме отладки. В среде Eclipse для этого достаточно нажать на кнопку с изображением «жука» (Кнопка) в панели инструментов либо клавишу «F11». При этом появится панель «Debug», в которой будет отображаться ход выполнения программы (путь её выполнения, произошедшие исключения, а также другая отладочная информация).

Как правило, программист заранее знает, в каком месте что-то может пойти не так. Поэтому расставляет в коде специальные ловушки — точки останова.

Точка останова (англ. breakpoint или жарг. «бряка») — это преднамеренное прерывание выполнения программы на специально помеченной строке редактора кода, при котором выполняется вызов отладчика.

В серьёзных программах насчитываются сотни и тысячи функций и классов. При возникновении исключения или при остановке программы на «бряке», часто необходимо знать, через какие функций и методы программа дошла до этого места. Подобная информация хранится в так называемом «стеке вызова».

Стек вызовов (от англ. call stack) — это список, хранящий информацию о последовательности вызова функций.

Стек вызова находится в панели «Debug», которая появляется при запуске программы в режиме отладки.

Щёлкая мышью по строкам стека вызова, можно переходить на нужную строку в редакторе кода. Причём в панели «Variables» будут отображаться локальные переменные именно той функции, в которую ты перешёл по стеку, т. к. стек хранит и значения локальных переменных.

Таким образом, используя стек вызова, можно увидеть последовательность вызова функций и значения локальных переменных внутри каждой функции.

Но в данном уроке мы не будем рассматривать инструменты отладчика: точки останова и стек вызова. Рекомендации по их использованию будут даны в более сложных проектах, а на данном этапе, когда твой код расположен в одном файле, его объём не превышает пару экранов, а сложность невысока, такой инструментарий не нужен.

1. Создай новый проект, а в нём создай класс с именем «myClass».

2. Открой «Код 2.txt» и скопируй его содержимое в метод «main».

Этот код должен вычислять индекс массы тела на основе роста и веса человека.

Индекс массы тела (англ. body mass index (BMI), ИМТ) — величина, позволяющая оценить степень соответствия массы человека и его роста и тем самым сделать заключение, является ли масса недостаточной, нормальной или избыточной. Важен при определении показаний для необходимости лечения.

Индекс массы тела измеряется в кг/м2 и рассчитывается по формуле:


где: m — масса тела в килограммах, h — рост в метрах.

Ниже показан пример работы программы:


3. Программа использует функцию «InputNumber». Скопируй её из проекта предыдущего урока.

Видно, что синтаксические ошибки в коде отсутствуют.

4. Запусти программу на выполнение. Но что же не так? Программа отобразила надпись «Введите своё имя:» и «упала» с ошибкой времени выполнения класса «NullPointerException»:


5. Перейди по ссылке на ошибку (гиперссылка с номером строки), компилятор укажет на строку, где произошло исключение:


Как видно из названия класса исключения, происходит попытка обращения к методу несозданного объекта. Как видно из строки выше, объект класса «Scanner» не создан, а просто объявлен:

	Scanner sc = null;
6. Инициализируй переменную объектом «Scanner».

	Scanner sc = new Scanner(System.in);
7. Запусти программу на выполнение и введи данные, например, «вес — 85 кг», а «рост — 187 см».

При таких значениях по формуле должно получиться значение 24.3. Но что мы видим? Программа выдаёт ноль:


Причём при любых других значениях она также будет выдавать ноль (при условии, что значение роста больше значения массы). Здесь явно где-то ошибка в вычислениях (т. е. логическая ошибка).

8. Найди и исправь эту ошибку самостоятельно.

Если у тебя возникли затруднения, давай разберём ошибку вместе.

В коде формула записана следующим образом:

	double result = m / h * h ;
По правилам расчёта математических выражений, она эквивалентна записи:

Таким образом, переменная h сокращается. Для возведения переменной h в квадрат необходимо знаменатель взять в скобки:

	double result = m / (h * h);
К тому же значение роста вводится в см, а в формуле фигурируют метры, значит, значение результата необходимо умножить на 10 000 (в метре 100 см, а рост возводится в квадрат, то есть на 100 нужно умножить два раза):

	double result = m / (h * h) * 10000;
Казалось бы, всё теперь заработает, но не тут-то было!

По правилам целочисленной арифметики в Java, при делении целых чисел результат также будет целым (округляется до ближайшего целого). Таким образом, полученная формула всё равно будет давать ноль, т. к. масса тела всегда меньше квадрата роста.

Для получения вещественного результата деления необходимо либо числитель, либо знаменатель привести к вещественному типу, например, так:

	double result = (double) m / (h * h) * 10000;
Примечание: можно также переменные «m» и «h» объявить как «double». В этом случае приведение их к типу «int» будет не нужно, а массу и рост можно будет вводить в виде вещественных чисел.

Теперь программа правильно рассчитывает результат?

Ну что ж, осталось вывести на экран вердикт, согласно таблице индекса массы тела.

Показатель индекса массы тела разработан бельгийским социологом и статистиком Адольфом Кетеле (Adolphe Quetelet) в 1869 году. В соответствии с рекомендациями Всемирной организации здравоохранения, разработана следующая интерпретация показателей ИМТ:

Индекс массы тела	Соответствие между массой человека и его ростом
16 и менее	Выраженный дефицит массы тела
16–18,5	Недостаточная (дефицит) масса тела
18,5–25	Норма
25–30	Избыточная масса тела (предожирение)
30–35	Ожирение первой степени
35–40	Ожирение второй степени
40 и более	Ожирение третьей степени (морбидное)
9. Открой файл «Код 3.txt». Скопируй и вставь его содержимое в метод «main» после расчёта массы тела.

Это блок условий для печати нужного результата. Блок условий работает согласно таблице индекса массы тела и разбивает числовую ось на семь областей:


10. Запусти программу на выполнение и введи данные (например, «вес — 85 кг», а «рост — 187 см»). Программа подряд отобразила все результаты (кроме первого и последнего), как будто никаких условий и нет:


Посмотри внимательней на условия. Каждое из них должно выбирать определённый интервал, как показано на рисунке выше, но почему-то они этого не делают.

Проблема в том, что интервалы объединяются логическим оператором «ИЛИ» (||). Допустим, получилось значение индекса, равное 26. Имеем в условиях: 26>16, 26>18.5, 26>25, 26<35, 26<40. В результате, любое значение будет удовлетворять условиям, где используется операция «ИЛИ».

Таким образом, логический оператор для условий был выбран неверно, и операцию «||» в коде необходимо заменить на операцию «&&».

11. Исправь ошибку в коде и запусти программу на выполнение и проверь её работу для каждого интервала (h = 187, m = 40, 60, 70, 90, 110, 130, 160).

При определённых данных программа всё ещё работает неверно!

12. Найди ошибку и исправь её.

Примечание: эта ошибка очень распространена, когда в программе встречается однотипный код. Программист пишет один из блоков, а остальные копирует, внося в них требуемые исправления, в результате часто пропускает то, что нужно исправить. Данная ошибка даже получила свое название — ошибка копипаста (от англ. copy / past)

Если у тебя возникли затруднения в поиске ошибки, то обрати внимание, что при индексе массы тела в интервале «Норма» или «Ожирение первой степени» выдаются оба результата, например:


Таким образом, при поиске ошибки нужно обратить внимание на запись условий в этих двух ситуациях.

В условиях дублируются значения (выделено цветом), а значит, одно из них записано неверно:

if (result>18.5 && result<=25)
   System.out.print("Норма");
...
if (result>18.5 && result<=40)
   System.out.print("Ожирение второй степени");

Второе условие необходимо заменить на следующее:

if (result>35 && result<=40)

13. Запусти программу на выполнение и проверь её работу для каждого интервала.

Теперь всё должно работать правильно!

На этом уроке ты получил основные навыки поиска и исправления ошибок в коде. В урок не попали практические упражнения по работе с исключениями блока «try...catch», т. к. ты ещё не знаком с типами данных и конструкциями, которые могут вызывать такие исключения. Но этот блок ты будешь активно использовать в последующих уроках.

