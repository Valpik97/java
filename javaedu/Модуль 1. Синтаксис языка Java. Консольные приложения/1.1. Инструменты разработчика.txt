Здравствуй, дорогой друг! Изучив общеобразовательную программу базового уровня, ты научишься разрабатывать прикладные программы на Java.

Ты приступаешь к изучению темы «Инструменты разработчика».

Изучение данной темы будет проводиться в формате онлайн-урока.

Онлайн-урок по этой теме состоится 01.10.2022.

Добро пожаловать в модуль программирования на языке Java!

Прежде чем начать программировать, тебе необходимо изучить основы алгоритмизации и программирования.

Алгоритм — описанная на некотором языке точная конечная система правил, определяющая содержание и порядок действий над некоторыми объектами, строгое выполнение которых дает решение поставленной задачи. Понятие алгоритма, являющееся фундаментальным в математике и информатике, возникло задолго до появления средств вычислительной техники.

Любой алгоритм существует не сам по себе, а предназначен для определенного исполнителя (человека, робота, компьютера и т. д.). Свойством, характеризующим любого исполнителя, является то, что он умеет выполнять некоторые команды. Совокупность команд, которые данный исполнитель умеет выполнять, называется системой команд исполнителя.

Алгоритм характеризуется следующими свойствами:

дискретностью,
массовостью,
определенностью,
результативностью,
формальностью.
Алгоритм, предназначенный для исполнения на компьютере, должен быть записан на «понятном» ему языке, такой формализованный язык называют языком программирования.

Программа — описание структуры алгоритма на языке алгоритмического программирования. Программа на языке декларативного программирования представляет собой совокупность описанных знаний и не содержит явного алгоритма исполнения.

Основные алгоритмические конструкции
Линейной называют алгоритмическую конструкцию, реализованную в виде последовательности действий (шагов), в которой каждое действие (шаг) алгоритма выполняется ровно один раз, причем после каждого i- гo действия (шага) выполняется (i+1)-е действие (шаг), если i-e действие — не конец алгоритма.

Разветвляющейся (или ветвящейся) называется алгоритмическая конструкция, обеспечивающая выбор между двумя альтернативами в зависимости от значения входных данных. При каждом конкретном наборе входных данных разветвляющийся алгоритм сводится к линейному. Различают неполное (если — то) и полное (если — то — иначе) ветвления.

Циклической (или циклом) называют алгоритмическую конструкцию, в которой некая, идущая подряд группа действий (шагов) алгоритма, может выполняться несколько раз, в зависимости от входных данных или условия задачи.

Кроме того, тебе необходимо установить некоторые инструменты разработчика. На уроке ты узнаешь, как устанавливать пакет JDK и среду разработки Eclipse, и научишься создавать проект — основу любой программы на Java.

 

Итак, приступим!

Для того чтобы запускать сторонние приложения, написанные на языке Java, тебе понадобится виртуальная машина Java. А чтобы писать свои программы на этом языке, компилировать их и отлаживать (находить ошибки), тебе необходим компилятор и множество служебных программ. Всё это есть в специальном пакете разработчика JDK (Java Development Kit).

Большинство бесплатных реализаций (а может быть даже все) базируются на общем коде, который разрабатывается совместными усилиями вендоров в рамках проекта OpenJDK. К этому общему коду каждый вендор дописывает свой инсталлятор (со своим логотипом), а также может добавлять какие-то дополнительные библиотеки и утилиты. Мы будем использовать сборку Azul Zulu.

В последние годы новые версии Java выходят каждые 6 месяцев, ранее циклы выпуска Java были намного длиннее, до трех или пяти лет! С появлением такого количества новых версий в действительности проекты в реальных компаниях часто до сих пор связаны с использованием Java 8. На это есть различные причины, например, инструменты сборки и некоторые библиотеки изначально имели ошибки с версиями Java выше 8 и нуждались в обновлениях, до Java 8 не нужно было заботиться о лицензировании, а в некоторых компаниях действуют политики, позволяющие использовать только версии LTS.

Таким образом, логично и оправдано начинать изучение программирования на Java с версии 8, так как программа Java 8 гарантированно будет работать с виртуальной машиной Java более поздних версий. Функции языка Java 8 работают и во всех последующих версиях. Это означает, что знание языковых возможностей Java 8 создаст хорошую базу в изучении Java, а все остальные версии Java просто дадут дополнительные функции поверх этого базового уровня.

Чтобы скачать пакет JDK, перейди по ссылке: https://www.azul.com/downloads/ и нажми кнопку «Download Now».
После перехода к списку версий выбери сборку Java 8 (в поле «Java Version») и укажи свою операционную систему (в поле «Operating System»).
Загрузи инсталлятор (для Windows — файл с расширением msi).
Выполни установку: просто нажимай кнопки «Next» и «Install», пока не будет выведено сообщение об успешном завершении установки, затем нажми кнопку «Finish».
Чтобы проверить правильность установки в операционной системе Windows, нужно запустить консоль (Пуск → Выполнить, команда «cmd») и в командной строке набрать команду where java, которая должна показать правильный путь до исполняемого файла java.exe. После этого можно выполнить команду java -version для проверки того, что это именно та версия, которую мы устанавливали:

Инсталлятор Java выполняет минимальную необходимую настройку окружения, в том числе он добавляет в переменную среды PATH путь к директории, которая содержит исполняемые файлы Java (в операционной системе Windows).

Но некоторые программы вместо этого используют переменную среды JAVA_HOME, которая должна указывать на директорию, в которую установлена Java. Поэтому на всякий случай нужно сразу установить эту переменную:

Выполни команду «Компьютер → Свойства → Дополнительные параметры системы → Переменные среды...».
В разделе «Системные переменные» нажми кнопку «Создать...» и укажи следующие данные: «Имя переменной» — JAVA_HOME, «Значение переменной» — путь к директории JDK. Например, если ты установил сборку Zulu JDK версии 8, в переменную JAVA_HOME нужно установить значение C:\Program Files\Zulu\zulu-8.
Нажми «ОК», чтобы сохранить изменения.
Для проверки открой консоль и выполни команду echo %JAVA_HOME%. В консоли должно отобразиться значение переменной, то есть путь к директории JDK.
Теперь проверим работоспособность оконных приложений, работающих под управлением виртуальной машины Java. Правда, своих приложений мы еще не разработали, поэтому протестируем чужое.

1. Загрузи демонстрационный пример приложения, например: CelsiusConverter.jnlp

JNLP или Java Network Launch Protocol представляет собой формат, который применяют для запуска исполняемых EXE-файлов Java по сети или через интернет. Во многих случаях такой файл содержит данные об удаленном адресе для загрузки Java-приложения и исходный класс для запуска. Открыть файл JNLP можно с помощью Java Web Start, но у нас еще не установлен JavaWS!

2. Для установки нужного компонента скачай инсталлятор по ссылке: https://www.azul.com/products/components/icedtea-web/. Этот инсталлятор установит на твой компьютер недостающий компонент. Запусти его и следуй инструкциям по установке:

По завершении установки запусти скачанный ранее JNLP-файл (если он не запускается автоматически, воспользуйся командой «Открыть с помощью» и выбери приложение «javaws» в папке: C:\Program Files\IcedTeaWeb\WebStart\bin).
Если при запуске появится предупреждение безопасности о проблемах с цифровой подписью, не обращай на него внимания. Разреши выполнить приложение. В результате должно запуститься оконное приложение, которое осуществляет конвертацию значений из градусов Цельсия в градусы по Фаренгейту:

В этом модуле ты будешь писать программный код в среде Eclipse. Это бесплатная среда разработки, которая обладает множеством средств, упрощающих разработку программ: начиная с подсветки синтаксиса языка Java и заканчивая интеллектуальными подсказками и визуальным конструктором интерфейса.

1. Зайди на официальный сайт Eclipse в раздел «Downloads».

2. Скачай версию Eclipse для разработчиков на языке Java, щёлкнув указателем мыши по версии, соответствующей твоей операционной системе:


3. Программа поставляется в виде zip-архива. Извлеки содержимое архива в корневую папку одного из дисков, доступных для записи. После извлечения данных из архива, в корне диска появится папка «eclipse». В нашем примере на диске D:


4. Создай ярлык программы «eclipse.exe» на рабочем столе, чтобы было удобнее её запускать.

 

Написание любой программы начинается с создания проекта.

1. Запусти среду Eclipse через созданный ярлык.

При первом запуске среда попросит указать, в какой папке будут находиться твои проекты, чтобы потом не искать программы по всем папкам.

2. В области «Workspace» укажи путь до папки проектов. Лучше, если она будет в корне диска. Поставь галочку «Use this as the default and do not ask again» (Использовать эти настройки по умолчанию и больше не спрашивать):


Примечание: если за компьютером работает несколько пользователей, то логичнее для каждого из них иметь своё рабочее пространство (папку с проектами), в этом случае галочку «Use this as the default and do not ask again» ставить не надо, и в момент запуска Eclipse будет давать возможность указать именно свою рабочую папку.

Среда Eclipse при первом запуске открывает вкладку «Welcome», где предлагает ознакомиться с возможностями среды и просмотреть демонстрационные проекты.

3. Закрой вкладку «Welcome». Появится перспектива разработчика на Java по умолчанию:


Перспектива в терминологии среды разработки — это набор панелей, отображающихся внутри окна, и их взаимное расположение.

Сверху расположено главное меню, а под ним панель инструментов, которая содержит кнопки быстрого доступа к наиболее используемым функциям главного меню.

Основную площадь окна занимает редактор исходного кода. Именно в нём ты будешь писать свои программы.

Примечание: если в среде открыто более одного файла, в верхней части редактора кода появляется строка вкладок, с помощью которой можно переключаться между файлами.

По бокам редактора кода находятся различные вспомогательные панели.

Панели можно настраивать (перемещать, убирать или добавлять новые). Наиболее важные для тебя панели — это файловый менеджер проекта «Package Explorer», панель списка ошибок в программе «Problems», а также панель результатов работы твоей программы в консольном режиме «Console». Для добавления других панелей используется команда «Window → Show View».

Помимо настроек рабочего пространства и перспективы, необходимо указать Eclipse, где на твоем компьютере установлена виртуальная машина Java.

Выполни команду «Window → Preferences».
В открывшемся окне раскрой список «Java» и щёлкни по пункту «Installed JREs».
Eclipse найдёт установленные JRE, но тебе нужно указать именно ту, которая установилась вместе с JDK Zulu. Если Eclipse выводит в списке не ту JRE, выдели её и нажми кнопку «Edit». Если JRE в списке отсутствуют, нажми кнопку «Add».
Установленная тобой JRE относится к типу Standard VM. Укажи в строке «JRE home» путь к папке: C:\Program Files\Zulu\zulu-8\jre.
Сохрани изменения:

В списке слева щёлкни по пункту «Compiler» и справа в списке «Compiler compliance level» выбери версию 1.8. Это версия Java, для которой будут компилироваться проекты.
Прими изменения и закрой окно настроек.
На этом подготовка инструментов разработчика закончена.

 

Написание любой программы начинается с создания проекта.

Проект Java представляет собой каталог, который размещается на жёстком диске в каталоге рабочего пространства среды Eclipse. В каталоге проекта также хранится набор каталогов и файлов, необходимых для успешной компиляции проекта.

Основная структура каталогов и файлов, которую может содержать каталог проекта, показана на рисунке:


Содержимое проекта условно можно разделить на две категории:

Файлы исходного кода, которые находятся в каталоге «src» (сокращение от source).
Служебные файлы проекта (например, библиотеки JRE) и ресурсы (например, графические, звуковые файлы и так далее).
Каждый проект имеет своё имя и папку, в которой расположены его файлы.

Создай новый проект, выбрав пункт «Java Project», нажав на кнопку «New» в панели инструментов (или в главном меню: File → New → Java Project):


В открывшемся окне создания нового проекта дай имя проекту. Имя вводится в поле «Project Name». Давай назовём проект «MyFirstProject».
В группе JRE выбери пункт «Use default JRE and workspace compiler preferences».
Сними галочку с пункта «Create module-info.java».
Больше никакие настройки не трогай и нажми на кнопку «Finish».
Примечание: если галочка с пункта «Create module-info.java» не снята, то появится еще одно окно, в котором нужно нажать кнопку «Don’t Create».

После перечисленных действий в папке рабочего пространства будет создана папка с именем проекта.

Обрати внимание, что в окне Eclipse слева есть панель «Package Explorer». Эта панель аналогична проводнику в ОС Windows и отображает файлы и папки твоего рабочего пространства. В частности, сейчас в ней появилась папка созданного проекта:


Создадим в проекте класс (ведь концепция языка Java построена на классах). Причём такой класс, программный код которого можно будет запускать.

1. Щёлкни по папке с проектом в панели «Package Explorer» и выбери пункт «Class», нажав на кнопку «New» на панели инструментов:


2. Дай классу имя, введя его в поле «Name». Давай назовём класс «Hello»:


3. Отметь пункт «public static void main (String [] args)». Этот пункт говорит о том, что класс имеет точку входа, т.е. при запуске программы будет выполняться код именно этого класса.

4. Нажми на кнопку «Finish». В результате в твоём проекте появится новый класс:


Обрати внимание, что класс находится в пакете «default package», хотя никаких пакетов ты не создавал. Дело в том, что классы, согласно концепции Java, должны объединяться в пакеты. И если пакет не создан, то классы помещаются в специальный пакет по умолчанию. Это делается больше для удобства визуального отображения/скрытия классов, которые не привязаны ни к одному явно созданному пакету, через треугольник слева от значка пакета: Кнопка

После создания класса, его код автоматический откроется в окне редактора кода:


Созданный класс уже имеет базовую структуру, необходимую для успешного запуска программы (которая пока ничего не делает). Как видно из кода, у базовой структуры класса есть имя «Hello» и метод с именем «main». Содержимое этого метода и будет выполняться при запуске программы.

Создадим программу, которая будет отображать в текстовой консоли строку: «Моя первая программа на Java!».

1. Для этого внутри метода «main» запиши следующий код:


Особенности этого кода мы рассмотрим на следующем уроке. Отметим только, что этот код вызывает метод печати в текстовой консоли строки текста, которая задана внутри команды «print» (текст должен быть заключён в двойные кавычки).

2. Сохрани изменения в проекте. Для этого нажми на одну из иконок в панели инструментов: Кнопка. Первая кнопка сохраняет активный файл (с этим действием ассоциировано сочетание клавиш Ctrl+S), а вторая — все изменённые тобой файлы в рабочем пространстве.

Признаком того, что в файле произошли изменения, которые не сохранены на диске, говорит значок звёздочки слева от имени файла в открытой вкладке, например:


Перед запуском приложения код обязательно нужно сохранять на диск!

3. Запусти программу на выполнение. Для этого нажми кнопку «Кнопка» в панели управления, либо комбинацию клавиш Ctrl+F11. В панели «Console» отобразится результат работы программы:


Получилась не очень впечатляющая программа, но это твоя первая работающая программа на Java!