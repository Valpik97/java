Здравствуй, дорогой друг!

Ты приступаешь к изучению темы «Взаимодействие с пользователем».

Изучение данной темы будет проводиться в формате онлайн-уроков.

Онлайн-уроки по этой теме состоятся 12.10.2022, 18.10.2022.

Чтобы компьютерная программа была универсальной, необходима организация диалога с пользователем. Все требуемые программе данные пользователь должен вводить с экрана. Ведь не будет же обычный пользователь устанавливать среду разработки и «копаться» в твоём коде, записывая в переменные нужные данные.

На онлайн-уроках ты:

научишь свои программы принимать данные от пользователя через текстовую консоль и на их основе формировать нужный результат;
научишься работать с функциями, что сделает твой код более понятным.
Напишем программу, которая запрашивает от пользователя его имя и возраст, а затем выводит сообщение в формате:

	<Имя>, тебе <Возраст> лет!
Для ввода данных используется класс «Scanner» из пакета «java.util». В этом классе есть методы для чтения очередного символа заданного типа со стандартного потока ввода, а также для проверки существования такого символа.

Для работы с потоком ввода необходимо создать объект класса «Scanner», указав, с каким потоком ввода он будет связан. Стандартный поток ввода (с клавиатуры) в Java представлен объектом «System.in».

Создание переменной с именем «sc», хранящей объект, созданный на основе класса «Scanner», выглядит следующим образом:

	Scanner sc = new Scanner(System.in);
Примечание: запустить проект ты не сможешь, если пакет с данным классом не включён в него. Его можно подключить с помощью подсказки Eclipse, либо прописать путь к нему вручную:

	import java.util.Scanner;
Ниже приведены основные методы класса «Scanner»:

Метод	Что делает	Возвращаемый тип
Считывание данных
nextLine()	Возвращает введённую строку до символа перехода строки (Enter)
String
nextBigDecimal()	Возвращает введённое число типа BigDecimal	BigDecimal
nextBigInteger()	Возвращает введённое число типа BigInteger	BigInteger
nextBoolean()	Возвращает введённое логическое значение (true/false)
boolean
nextDouble()	Возвращает введённое число типа double	double
nextByte()	Возвращает введённое число типа byte	byte
nextFloat()	Возвращает введённое число типа float	float
nextInt()	Возвращает введённое число типа int	int
nextLong()	Возвращает введённое число типа long	long
nextShort()	Возвращает введённое число типа short	short
Проверка ввода
hasNext()	Возвращает true, если есть что вводить
boolean
hasNextBigDecimal()	Возвращает true, если можно ввести BigDecimal
hasNextBigInteger()	Возвращает true, если можно ввести BigInteger
hasNextBoolean()	Возвращает true, если можно ввести boolean
hasNextByte()	Возвращает true, если можно ввести byte
hasNextDouble()	Возвращает true, если можно ввести double
hasNextFloat()	Возвращает true, если можно ввести float
hasNextInt()	Возвращает true, если можно ввести int
hasNextShort()	Возвращает true, если можно ввести short
Программу можно разделить на три части:

1. Создание объекта класса «Scanner». Назови переменную, в которую будет помещён объект — «sc»:

	Scanner sc = new Scanner(System.in);
2. Получение от пользователя имени и возраста с помощью методов объекта класса «Scanner»:

	Systemout.println("Как тебя зовут?");
	String name = sc.nextLine();
	Systemout.println("Сколько тебе лет?");
	int age = sc.nextInt();
3. Отображение результата в требуемом формате:

	Systemout.print(name + ", тебе " + age + " лет!");
Итак, сейчас ты научишься вводить данные с клавиатуры через текстовую консоль.

1. Создай новый проект и создай в нём класс с именем «myClass».

2. Напиши программу.

Если у тебя возникли затруднения в написании программы, держи полный код:


3. Запусти программу на выполнение и проверь её работоспособность, введя нужные данные, например:


4. Теперь ещё раз запусти программу, но при запросе возраста введи нецелочисленный литерал, например:


В результате работа программы прекратится, т. к. произошла исключительная ситуация (т. е. что-то пошло не так, как ожидалось, и программа прекратила свою работу).

Действительно, метод «nextInt()» ожидал ввода целого числа, и, не получив его, выдал исключение «InputMismatchException», что переводится как «несоответствие входных данных».

Чтобы программа корректно обработала неверный ввод данных и предупредила об этом пользователя (или, например, запросила ввод повторно), можно предложить два варианта решения:

Проверить, действительно ли введено целое число. Но о проверке условий речь пойдёт только в следующем уроке.
Поставить «ловушку» на исключительную ситуацию. Но о работе с исключительными ситуациями мы вообще поговорим только в седьмом уроке данного модуля.
А пока что будь очень внимательным при вводе данных!

Напишем программу, которая запрашивает у пользователя два вещественных числа и вычисляет их произведение.

1. Создай новый проект и создай в нём класс с именем «myClass».

2. Чтобы было понятно, что делает программа, выведи небольшую «шапку»:

	System.out.println("Программа умножения двух чисел");
	System.out.println("-----------------------------");
3. Затем запроси у пользователя два вещественных числа:

	Scanner sc = new Scanner(System.in);
	System.out.print("Введи первое число: ");
	double n1 = sc.nextDouble();
	System.out.print("Введи второе число: ");
	double n2 = sc.nextDouble();
4. И после вычисли их произведение и отобрази результат на экране:

	double result = n1 * n2;
	System.out.print(n1 + " * " + n2 + " = " + result);
5. Запусти программу на выполнение. Ниже приведён возможный результат работы программы:


Обрати внимание, что символ разделителя, отделяющий дробную часть числа от целой, определяется региональными настройками операционной системы. Обычно это точка или запятая, но если ты введёшь число, используя точку, то получишь ошибку ввода, поэтому будь внимательным при вводе данных!

Код программы из предыдущего шага можно модифицировать, вынеся в отдельные функции части программы.

Теперь познакомимся с функциями в языке Java. Кстати, Java — объектно-ориентированный язык программирования, а у классов и объектов функции называются методами.

Давай вспомним, что такое функция, и рассмотрим, как она записывается на языке Java.

 

Функция — это часть программы, имеющая собственное имя.

Имя функции можно использовать в программе как переменную или как метод. При вызове функции выполняются команды, из которых она состоит.

Вызов функции может возвращать значение и поэтому может использоваться в выражении. К тому же функция может иметь входные параметры (аргументы функции), что позволяет выполнять одни и те же операции, но над различными данными.

Общая форма записи (сигнатура) функции следующая:

	<Тип функции> <Имя Функции> ( <Параметры функции> ) {
	<тело функции>
	return <возвращаемое значение>
	}
 

Особенности работы функции:

Описание каждого параметра функции аналогично объявлению переменной (тип, а затем идентификатор — имя параметра). Параметры перечисляются через запятую.
Последовательность перечисления параметров при вызове функции должна соответствовать последовательности перечисления параметров в описании этой функции.
Оператор «return», после которого указывается выражение типа, соответствующего типу функции, заканчивает работу функции и передаёт указанное выражение в качестве возвращаемого значения в то место, откуда была вызвана функция.
Если функция не должна возвращать значение, то вместо типа функции пишется ключевое слово «void», а оператор «return» может отсутствовать либо записывается без возвращаемого значения (в этом случае он просто прерывает работу функции).
Далее модифицируем код, вынеся в отдельные функции следующие части программы:

Отображение текстового заголовка программы.
Запрос ввода вещественного числа.
Расчёт значения произведения двух чисел и вывод результата.
Примечание: согласно концепции ООП (объектно-ориентированного программирования), все функции, которые содержит класс «myClass», являются его методами.

 

Отображение текстового заголовка программы

Функция отображения заголовка программы будет выглядеть следующим образом:

	static void Header(){
	    System.out.println("Программа умножения двух чисел");
	    System.out.println("-----------------------------");
	}
Так как функция ничего не возвращает, она имеет модификатор «void». Также для всех функций, которые ты сейчас создаёшь, должен быть установлен модификатор «static», т. к. они вызываются из метода «main», который имеет этот модификатор (подробнее модификатор «static» будет рассмотрен позже).

 

Запрос ввода вещественного числа

В функцию ввода вещественного числа нужно передавать в качестве аргумента текстовое сообщение, которое будет пояснять, что именно требуется ввести, а возвращать эта функция будет введённые пользователем данные (в нашем случае, вещественное число). Код такой функции приведён ниже:

	static double InputNumber(String caption){
	    System.out.print(caption);
	    Scanner sc = new Scanner(System.in);
	    return sc.nextDouble();
	}
Обрати внимание, что функция возвращает значение типа «double», используя ключевое слово «return».

 

Расчёт значения произведения двух чисел и вывод результата

Функция расчёта произведения введённых чисел и вывод результата в консоль будет иметь два аргумента (введённые пользователем числа), а возвращать ничего не будет:

	static void Result(double a, double b){
	    double result = a * b;
	    System.out.print(a + " * " + b + " = " + result);
	}
 

Метод «main»

Теперь можно изменить тело метода (функции) «main» с учётом написанных функций:

	public static void main(String[] args) {
	     Header();
	    // Ввод чисел
	    double n1 = InputNumber("Введи первое число: ");
	    double n2 = InputNumber("Введи второе число: ");
	    // Результат
	    Result(n1, n2);
	}
Тело функции «main» существенно сократилось и стало более понятным.

Обрати внимание, что в функцию «Result» передаются переменные «n1» и «n2», а в аргументах самой функции объявлены переменные «a» и «b». В результате при обращении к функции выполняется неявное присваивание переменных: «a = n1» и «b = n2» (присвоения выполняются в порядке следования аргументов).

Если у тебя возникли затруднения в написании программы, можешь посмотреть полный код:


Помнишь, что при вводе вещественного числа обязательно нужно вводить запятую? Это не очень удобно для пользователя, поэтому давай рассмотрим, как можно эту ситуацию обойти.

Чтобы при вводе вещественного числа можно было вводить как точку, так и запятую, необходимо выполнить три операции:

1. Считать введённое число как строку.

2. Заменить в этой строке запятую на точку (работа со строками, в том числе замена символов в строке, будет рассмотрена более подробно позже, поэтому сейчас просто воспользуйся кодом из примера).

3. Воспользоваться методом «parseDouble» объекта класса «Double», который конвертирует строковое представление вещественного числа в тип «double».

Ниже приведён код считывания вещественного числа этим алгоритмом:

	String n1S = sc.nextLine();
	double n1 = Double.parseDouble( n1S.replace( ',', '.' ) );
Примечание: алгоритм основан на том факте, что в литералах вещественного типа разделителем целой и дробной части всегда является точка. Литералы — это константы, которые записаны по правилам языка Java.

Измени код метода «InputNumber» с учетом сказанного.
Добавь в программу код смены кодировки для консоли Windows и задержку экрана.
Создай архивный файл «.jar» и исполняемый файл «.exe».
Всё готово! Теперь ты знаешь, как запросить у пользователя нужные данные и как использовать в своих программах функции.